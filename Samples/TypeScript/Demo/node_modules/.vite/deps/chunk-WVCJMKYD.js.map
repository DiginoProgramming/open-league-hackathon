{
  "version": 3,
  "sources": ["../../tonfura-sdk/src/constants/settings.ts", "../../tonfura-sdk/src/constants/method.ts", "../../tonfura-sdk/src/api/Core.ts", "../../tonfura-sdk/src/api/TonfuraConfig.ts", "../../tonfura-sdk/src/api/Transact.ts", "../../tonfura-sdk/src/api/Tonfura.ts"],
  "sourcesContent": ["export enum Network {\n  Mainnet = 'mainnet',\n  Testnet = 'testnet'\n}\n\nexport const DEFAULT_TONFURA_API_KEY = 'DEFAULT_API_KEY';\nexport const DEFAULT_NETWORK = Network.Mainnet;\nexport const DEFAULT_MAX_RETRIES = 5;\n\n/**\n * Returns the base URL for making Tonfura API requests.\n *\n * @internal\n */\nexport function getTonfuraHttpUrl(network: Network, apiKey: string): string {\n  return `https://${network}-rpc.tonfura.com/v1/json-rpc/${apiKey}`;\n}\n", "export enum Method {\n  // accounts\n  TON_GET_ADDRESS_INFO = 'ton_getAddressInformation',\n  TON_GET_EXTENDEDADDRESSINFORMATION = 'ton_getExtendedAddressInformation',\n  TON_GET_WALLET_INFORMATION = 'ton_getWalletInformation',\n  TON_GET_ADDRESS_BALANCE = 'ton_getAddressBalance',\n  TON_GET_ADDRESSSTATE = 'ton_getAddressState',\n  TON_PACK_ADDRESS = 'ton_packAddress',\n  TON_UNPACK_ADDRESS = 'ton_unpackAddress',\n  TON_DETECT_ADDRESS = 'ton_detectAddress',\n  TON_GET_TOKEN_DATA = 'ton_getTokenData',\n  // blocks\n  TON_GET_MASTERCHAININFO = 'ton_getMasterchainInfo',\n  TON_GET_MASTERCHAINBLOCKSIGNATURES = 'ton_getMasterchainBlockSignatures',\n  TON_GET_SHARDBLOCKPROOF = 'ton_getShardBlockProof',\n  TON_GET_CONSENSUSBLOCK = 'ton_getConsensusBlock',\n  TON_LOOKUP_BLOCK = 'ton_lookupBlock',\n  TON_SHARDS = 'ton_shards',\n  TON_GET_BLOCKHEADER = 'ton_getBlockHeader',\n  // transactions\n  TON_GET_TRANSACTIONS = 'ton_getTransactions',\n  TON_GET_BLOCK_TRANSACTIONS = 'ton_getBlockTransactions',\n  TON_TRYLOCATETX = 'ton_tryLocateTx',\n  TON_TRYLOCATERESULTTX = 'ton_tryLocateResultTx',\n  TON_TRYLOCATESOURCETX = 'ton_tryLocateSourceTx',\n  // get config\n  TON_GET_CONFIGPARAM = 'ton_getConfigParam',\n  // run method\n  TON_RUN_GET_METHOD = 'ton_runGetMethod',\n  // send\n  TON_SEND_BOC = 'ton_sendBoc',\n  TON_SEND_BOC_RETURN_HASH = 'ton_sendBocReturnHash',\n  TON_ESTIMATEFEE = 'ton_estimateFee'\n}\n", "import { Method } from '../constants';\nimport * as TonTypes from '../types/ton-types';\nimport { TonfuraConfig } from './TonfuraConfig';\n\n/**\n * The Core contains all commonly-used ton's methods.\n *\n * Do not call this constructor directly. Instead, instantiate an Tonfura object\n * with `const tonfura = new Tonfura(config)` and then access the Core via `tonfura.core`.\n */\nexport class Core {\n  /** @internal */\n  constructor(private readonly config: TonfuraConfig) {}\n\n  /**\n   * Returns the information of a given address.\n   * Information includes the balance, code, data and last_transaction_id\n   *\n   * @param address The address of the account.\n   * @public\n   */\n  async getAddressInformation(\n    address: TonTypes.GetAddressInformationParams['address']\n  ) {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.GetAddressInformationParams,\n      TonTypes.GetAddressInformationResult\n    >(Method.TON_GET_ADDRESS_INFO, { address });\n  }\n\n  /**\n   * Returns more information of a given address.\n   * Information not only includes the balance, code, data and last_transaction_id,\n   * But also includes the parsed additional information for known contract types\n   * This method is based on tonlib's function getAccountState.\n   * For detecting wallets we recommend to use getWalletInformation.\n   *\n   * @param address The address of the account.\n   * @public\n   */\n  async getExtendedAddressInformation(\n    address: TonTypes.GetExtendedaddressinformationParams['address']\n  ) {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.GetExtendedaddressinformationParams,\n      TonTypes.GetExtendedaddressinformationResult\n    >(Method.TON_GET_EXTENDEDADDRESSINFORMATION, { address });\n  }\n\n  /**\n   * Retrieve wallet information.\n   * This method parses contract state and\n   * currently supports more wallet types than getExtendedAddressInformation: simple wallet, standart wallet, v3 wallet, v4 wallet.\n   *\n   * @param address The address of the account.\n   * @public\n   */\n  async getWalletInformation(\n    address: TonTypes.GetWalletinformationParams['address']\n  ) {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.GetWalletinformationParams,\n      TonTypes.GetWalletinformationResult\n    >(Method.TON_GET_WALLET_INFORMATION, { address });\n  }\n\n  /**\n   * Get balance (in nanotons) of a given address.\n   *\n   * @param address The address of the account.\n   * @public\n   */\n  async getAddressBalance(\n    address: TonTypes.GetAddressbalanceParams['address']\n  ) {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.GetAddressbalanceParams,\n      TonTypes.GetAddressbalanceResult\n    >(Method.TON_GET_ADDRESS_BALANCE, { address });\n  }\n\n  /**\n   * Get state of a given address. State can be either unitialized, active or frozen.\n   *\n   * @param address The address of the account.\n   * @public\n   */\n  async getAddressState(address: TonTypes.GetAddressstateParams['address']) {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.GetAddressstateParams,\n      TonTypes.GetAddressstateResult\n    >(Method.TON_GET_ADDRESSSTATE, { address });\n  }\n\n  /**\n   * Convert an address from raw to human-readable format.\n   *\n   * @param address The address of the account.\n   * @public\n   */\n  async packAddress(address: TonTypes.PackAddressParams['address']) {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.PackAddressParams,\n      TonTypes.PackAddressResult\n    >(Method.TON_PACK_ADDRESS, { address });\n  }\n\n  /**\n   * Convert an address from human-readable to raw format.\n   *\n   * @param address The address of the account.\n   * @public\n   */\n  async unpackAddress(address: TonTypes.UnpackAddressParams['address']) {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.UnpackAddressParams,\n      TonTypes.UnpackAddressResult\n    >(Method.TON_UNPACK_ADDRESS, { address });\n  }\n\n  /**\n   * Get all possible address forms.\n   *\n   * @param address The address of the account.\n   * @public\n   */\n  async detectAddress(address: TonTypes.DetectAddressParams['address']) {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.DetectAddressParams,\n      TonTypes.DetectAddressResult\n    >(Method.TON_DETECT_ADDRESS, { address });\n  }\n\n  /**\n   * Get NFT or Jetton information.\n   *\n   * @param address The address of the account.\n   * @public\n   */\n  async getTokenData(address: TonTypes.GetTokenDataParams['address']) {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.GetTokenDataParams,\n      TonTypes.GetTokenDataResult\n    >(Method.TON_GET_TOKEN_DATA, { address });\n  }\n\n  /**\n   * Get up-to-date masterchain state.\n   *\n   * @public\n   */\n  async getMasterchainInfo() {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.GetMasterchainInfoParams,\n      TonTypes.GetMasterchainInfoResult\n    >(Method.TON_GET_MASTERCHAININFO);\n  }\n\n  /**\n   * Get up-to-date masterchain state.\n   *\n   * @param senqo The senqo of the master chain block signatures.\n   * @public\n   */\n  async getMasterchainBlockSignatures(\n    seqno: TonTypes.GetMasterchainBlockSignaturesParams['seqno']\n  ) {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.GetMasterchainBlockSignaturesParams,\n      TonTypes.GetMasterchainBlockSignaturesResult\n    >(Method.TON_GET_MASTERCHAINBLOCKSIGNATURES, { seqno });\n  }\n\n  /**\n   * Get merkle proof of shardchain block.\n   *\n   * @param params The variable of the shardchain block.\n   * @public\n   */\n  async getShardBlockProof(params: TonTypes.GetShardBlockProofParams) {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.GetShardBlockProofParams,\n      TonTypes.GetShardBlockProofResult\n    >(Method.TON_GET_SHARDBLOCKPROOF, params);\n  }\n\n  /**\n   * Get consensus block and its update timestamp.\n   *\n   * @public\n   */\n  async getConsensusBlock() {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.GetConsensusBlockParams,\n      TonTypes.GetConsensusBlockResult\n    >(Method.TON_GET_CONSENSUSBLOCK);\n  }\n\n  /**\n   * Look up block by either seqno, lt or unixtime.\n   *\n   * @param params The variable of the block.\n   * @public\n   */\n  async lookupBlock(params: TonTypes.LookupBlockParams) {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.LookupBlockParams,\n      TonTypes.LookupBlockResult\n    >(Method.TON_LOOKUP_BLOCK, params);\n  }\n\n  /**\n   * Get shards information.\n   *\n   * @param senqo The senqo of the shards.\n   * @public\n   */\n  async shards(seqno: TonTypes.ShardsParams['seqno']) {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.ShardsParams,\n      TonTypes.ShardsResult\n    >(Method.TON_SHARDS, { seqno });\n  }\n\n  /**\n   * Get metadata of a given block.\n   *\n   * @param params The variable of the block.\n   * @public\n   */\n  async getBlockHeader(params: TonTypes.GetBlockHeaderParams) {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.GetBlockHeaderParams,\n      TonTypes.GetBlockHeaderResult\n    >(Method.TON_GET_BLOCKHEADER, params);\n  }\n\n  /**\n   * Get transaction history of a given address.\n   *\n   * @param params The variable of the transactions.\n   * @public\n   */\n  async getTransactions(params: TonTypes.GetTransactionsParams) {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.GetTransactionsParams,\n      TonTypes.GetTransactionsResult\n    >(Method.TON_GET_TRANSACTIONS, params);\n  }\n\n  /**\n   * Get transactions of the given block.\n   *\n   * @param params The variable of the block.\n   * @public\n   */\n  async getBlockTransactions(params: TonTypes.GetBlockTransactionsParams) {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.GetBlockTransactionsParams,\n      TonTypes.GetBlockTransactionsResult\n    >(Method.TON_GET_BLOCK_TRANSACTIONS, params);\n  }\n\n  /**\n   * Locate outcoming transaction of destination address by incoming message.\n   *\n   * @param params The variable of the transactions.\n   * @public\n   */\n  async tryLocateTx(params: TonTypes.TryLocateTxParams) {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.TryLocateTxParams,\n      TonTypes.TryLocateTxResult\n    >(Method.TON_TRYLOCATETX, params);\n  }\n\n  /**\n   * Locate outcoming transaction of destination address by incoming message\n   *\n   * @param params The variable of the transactions.\n   * @public\n   */\n  async tryLocateResultTx(params: TonTypes.TryLocateResultTxParams) {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.TryLocateResultTxParams,\n      TonTypes.TryLocateResultTxResult\n    >(Method.TON_TRYLOCATERESULTTX, params);\n  }\n\n  /**\n   * Locate incoming transaction of source address by outcoming message.\n   *\n   * @param params The variable of the transactions.\n   * @public\n   */\n  async tryLocateSourceTx(params: TonTypes.TryLocateSourceTxParams) {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.TryLocateSourceTxParams,\n      TonTypes.TryLocateSourceTxResult\n    >(Method.TON_TRYLOCATESOURCETX, params);\n  }\n\n  /**\n   * Get config by id.\n   *\n   * @param params The variable of the config.\n   * @public\n   */\n  async getConfigParam(params: TonTypes.GetConfigParamParams) {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.GetConfigParamParams,\n      TonTypes.GetConfigParamResult\n    >(Method.TON_GET_CONFIGPARAM, params);\n  }\n\n  /**\n   * Run get method on smart contract.\n   *\n   * @param params The variable of the block.\n   * @public\n   */\n  async runGetMethod(params: TonTypes.RunGetMethodParams) {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.RunGetMethodParams,\n      TonTypes.RunGetMethodResult\n    >(Method.TON_RUN_GET_METHOD, params);\n  }\n\n  /**\n   * Estimate fees required for query processing. body, init-code and init-data accepted in serialized format (b64-encoded).\n   *\n   * @param params The variable of the block.\n   * @public\n   */\n  async estimateFee(params: TonTypes.EstimatefeeParams) {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.EstimatefeeParams,\n      TonTypes.EstimatefeeResult\n    >(Method.TON_ESTIMATEFEE, params);\n  }\n}\n", "import {\n  DEFAULT_MAX_RETRIES,\n  DEFAULT_NETWORK,\n  DEFAULT_TONFURA_API_KEY,\n  Network\n} from '../constants';\nimport { TonfuraSettings } from '../types/types';\nimport type { TonfuraProvider } from './TonfuraProvider';\n\n/**\n * This class holds the config information for the SDK client instance and\n * exposes the underlying providers for more advanced use cases.\n *\n * @public\n */\nexport class TonfuraConfig {\n  /** The Tonfura API key. */\n  readonly apiKey: string;\n\n  /** The Network that this SDK is associated with. */\n  readonly network: Network;\n\n  /** The maximum number of retries to perform. */\n  readonly maxRetries: number;\n\n  /**\n   * The optional hardcoded URL to send requests to instead of using the network\n   * and apiKey.\n   */\n  readonly url?: string;\n\n  /**\n   * Dynamically imported provider instance.\n   *\n   * @internal\n   */\n  private _baseTonfuraProvider: Promise<TonfuraProvider> | undefined;\n\n  constructor(config?: TonfuraSettings) {\n    this.apiKey = config?.apiKey || DEFAULT_TONFURA_API_KEY;\n    this.network = config?.network || DEFAULT_NETWORK;\n    this.maxRetries = config?.maxRetries || DEFAULT_MAX_RETRIES;\n    this.url = config?.url;\n  }\n\n  /**\n   * Returns an TonfuraProvider instance. Only one provider is created per\n   * Tonfura instance.\n   *\n   * The TonfuraProvider is a wrapper around `axios` class and\n   * has been expanded to support Tonfura's APIs.\n   *\n   * @public\n   */\n  getProvider(): Promise<TonfuraProvider> {\n    if (!this._baseTonfuraProvider) {\n      this._baseTonfuraProvider = (async () => {\n        const { TonfuraProvider } = await import('./TonfuraProvider');\n        return new TonfuraProvider(this);\n      })();\n    }\n    return this._baseTonfuraProvider;\n  }\n}\n", "import { Method } from '../constants';\nimport * as TonTypes from '../types/ton-types';\nimport { TonfuraConfig } from './TonfuraConfig';\n\n/**\n * The Transact contains methods used for sending transactions and\n * checking on the state of submitted transactions.\n *\n * Do not call this constructor directly. Instead, instantiate an Tonfura object\n * with `const tonfura = new Tonfura(config)` and then access the transact via `tonfura.transact`.\n */\nexport class Transact {\n  /** @internal */\n  constructor(private readonly config: TonfuraConfig) {}\n\n  /**\n   * Send serialized boc file: fully packed and serialized external message to blockchain.\n   *\n   * @param boc\n   * @public\n   */\n  async sendBoc(boc: TonTypes.SendBocParams['boc']) {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.SendBocParams,\n      TonTypes.SendBocResult\n    >(Method.TON_SEND_BOC, { boc });\n  }\n\n  /**\n   * Send serialized boc file: fully packed and serialized external message to blockchain. The method returns message hash.\n   *\n   * @param boc\n   * @public\n   */\n  async sendBocReturnHash(boc: TonTypes.SendBocReturnHashParams['boc']) {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.SendBocReturnHashParams,\n      TonTypes.SendBocReturnHashResult\n    >(Method.TON_SEND_BOC_RETURN_HASH, { boc });\n  }\n\n  // TODO: Implement sendQuery\n}\n", "import { TonfuraSettings } from '../types/types';\nimport { Core } from './Core';\nimport { TonfuraConfig } from './TonfuraConfig';\nimport { Transact } from './Transact';\n\n/**\n * The Tonfura SDK client. This class is the main entry point into Tonfura's\n * APIs and separates functionality into different namespaces.\n *\n * Each SDK instance is associated with a specific network and API key. To use a\n * different network or API key, create a new instance of {@link Tonfura}.\n *\n * @public\n */\nexport class Tonfura {\n  /**\n   * The `core` contains the core ton json-rpc calls.\n   */\n  readonly core: Core;\n\n  /**\n   * The `transact` contains methods for sending transactions and\n   * checking on the state of submitted transasctions.\n   */\n  readonly transact: Transact;\n\n  /**\n   * Holds the setting information for the instance of the Tonfura SDK client\n   * and allows access to the underlying providers.\n   */\n  readonly config: TonfuraConfig;\n\n  /**\n   * @param {string} [settings.id] - The id to use for Tonfura\n   * @param {string} [settings.apiKey] - The API key to use for Tonfura\n   * @param {Network} [settings.network] - The network to use for Tonfura\n   * @param {url} [settings.url] - Optional URL endpoint to use for all requests.\n   * @param {number} [settings.maxRetries] - The maximum number of retries to attempt\n   * @param {number} [settings.requestTimeout] - The timeout after which request should fail\n   * @public\n   */\n  constructor(settings?: TonfuraSettings) {\n    this.config = new TonfuraConfig(settings);\n\n    this.core = new Core(this.config);\n    this.transact = new Transact(this.config);\n  }\n}\n"],
  "mappings": "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",
  "names": ["Network", "Method"]
}
