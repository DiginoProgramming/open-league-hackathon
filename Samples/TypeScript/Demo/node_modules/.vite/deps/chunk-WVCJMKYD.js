// node_modules/tonfura-sdk/dist/esm/index-a316dfb9.js
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
var Network;
(function(Network2) {
  Network2["Mainnet"] = "mainnet";
  Network2["Testnet"] = "testnet";
})(Network || (Network = {}));
var DEFAULT_TONFURA_API_KEY = "DEFAULT_API_KEY";
var DEFAULT_NETWORK = Network.Mainnet;
var DEFAULT_MAX_RETRIES = 5;
function getTonfuraHttpUrl(network, apiKey) {
  return `https://${network}-rpc.tonfura.com/v1/json-rpc/${apiKey}`;
}
var Method;
(function(Method2) {
  Method2["TON_GET_ADDRESS_INFO"] = "ton_getAddressInformation";
  Method2["TON_GET_EXTENDEDADDRESSINFORMATION"] = "ton_getExtendedAddressInformation";
  Method2["TON_GET_WALLET_INFORMATION"] = "ton_getWalletInformation";
  Method2["TON_GET_ADDRESS_BALANCE"] = "ton_getAddressBalance";
  Method2["TON_GET_ADDRESSSTATE"] = "ton_getAddressState";
  Method2["TON_PACK_ADDRESS"] = "ton_packAddress";
  Method2["TON_UNPACK_ADDRESS"] = "ton_unpackAddress";
  Method2["TON_DETECT_ADDRESS"] = "ton_detectAddress";
  Method2["TON_GET_TOKEN_DATA"] = "ton_getTokenData";
  Method2["TON_GET_MASTERCHAININFO"] = "ton_getMasterchainInfo";
  Method2["TON_GET_MASTERCHAINBLOCKSIGNATURES"] = "ton_getMasterchainBlockSignatures";
  Method2["TON_GET_SHARDBLOCKPROOF"] = "ton_getShardBlockProof";
  Method2["TON_GET_CONSENSUSBLOCK"] = "ton_getConsensusBlock";
  Method2["TON_LOOKUP_BLOCK"] = "ton_lookupBlock";
  Method2["TON_SHARDS"] = "ton_shards";
  Method2["TON_GET_BLOCKHEADER"] = "ton_getBlockHeader";
  Method2["TON_GET_TRANSACTIONS"] = "ton_getTransactions";
  Method2["TON_GET_BLOCK_TRANSACTIONS"] = "ton_getBlockTransactions";
  Method2["TON_TRYLOCATETX"] = "ton_tryLocateTx";
  Method2["TON_TRYLOCATERESULTTX"] = "ton_tryLocateResultTx";
  Method2["TON_TRYLOCATESOURCETX"] = "ton_tryLocateSourceTx";
  Method2["TON_GET_CONFIGPARAM"] = "ton_getConfigParam";
  Method2["TON_RUN_GET_METHOD"] = "ton_runGetMethod";
  Method2["TON_SEND_BOC"] = "ton_sendBoc";
  Method2["TON_SEND_BOC_RETURN_HASH"] = "ton_sendBocReturnHash";
  Method2["TON_ESTIMATEFEE"] = "ton_estimateFee";
})(Method || (Method = {}));
var Core = class {
  /** @internal */
  constructor(config) {
    this.config = config;
  }
  /**
   * Returns the information of a given address.
   * Information includes the balance, code, data and last_transaction_id
   *
   * @param address The address of the account.
   * @public
   */
  getAddressInformation(address) {
    return __awaiter(this, void 0, void 0, function* () {
      const provider = yield this.config.getProvider();
      return provider.sendJsonRpcRequest(Method.TON_GET_ADDRESS_INFO, { address });
    });
  }
  /**
   * Returns more information of a given address.
   * Information not only includes the balance, code, data and last_transaction_id,
   * But also includes the parsed additional information for known contract types
   * This method is based on tonlib's function getAccountState.
   * For detecting wallets we recommend to use getWalletInformation.
   *
   * @param address The address of the account.
   * @public
   */
  getExtendedAddressInformation(address) {
    return __awaiter(this, void 0, void 0, function* () {
      const provider = yield this.config.getProvider();
      return provider.sendJsonRpcRequest(Method.TON_GET_EXTENDEDADDRESSINFORMATION, { address });
    });
  }
  /**
   * Retrieve wallet information.
   * This method parses contract state and
   * currently supports more wallet types than getExtendedAddressInformation: simple wallet, standart wallet, v3 wallet, v4 wallet.
   *
   * @param address The address of the account.
   * @public
   */
  getWalletInformation(address) {
    return __awaiter(this, void 0, void 0, function* () {
      const provider = yield this.config.getProvider();
      return provider.sendJsonRpcRequest(Method.TON_GET_WALLET_INFORMATION, { address });
    });
  }
  /**
   * Get balance (in nanotons) of a given address.
   *
   * @param address The address of the account.
   * @public
   */
  getAddressBalance(address) {
    return __awaiter(this, void 0, void 0, function* () {
      const provider = yield this.config.getProvider();
      return provider.sendJsonRpcRequest(Method.TON_GET_ADDRESS_BALANCE, { address });
    });
  }
  /**
   * Get state of a given address. State can be either unitialized, active or frozen.
   *
   * @param address The address of the account.
   * @public
   */
  getAddressState(address) {
    return __awaiter(this, void 0, void 0, function* () {
      const provider = yield this.config.getProvider();
      return provider.sendJsonRpcRequest(Method.TON_GET_ADDRESSSTATE, { address });
    });
  }
  /**
   * Convert an address from raw to human-readable format.
   *
   * @param address The address of the account.
   * @public
   */
  packAddress(address) {
    return __awaiter(this, void 0, void 0, function* () {
      const provider = yield this.config.getProvider();
      return provider.sendJsonRpcRequest(Method.TON_PACK_ADDRESS, { address });
    });
  }
  /**
   * Convert an address from human-readable to raw format.
   *
   * @param address The address of the account.
   * @public
   */
  unpackAddress(address) {
    return __awaiter(this, void 0, void 0, function* () {
      const provider = yield this.config.getProvider();
      return provider.sendJsonRpcRequest(Method.TON_UNPACK_ADDRESS, { address });
    });
  }
  /**
   * Get all possible address forms.
   *
   * @param address The address of the account.
   * @public
   */
  detectAddress(address) {
    return __awaiter(this, void 0, void 0, function* () {
      const provider = yield this.config.getProvider();
      return provider.sendJsonRpcRequest(Method.TON_DETECT_ADDRESS, { address });
    });
  }
  /**
   * Get NFT or Jetton information.
   *
   * @param address The address of the account.
   * @public
   */
  getTokenData(address) {
    return __awaiter(this, void 0, void 0, function* () {
      const provider = yield this.config.getProvider();
      return provider.sendJsonRpcRequest(Method.TON_GET_TOKEN_DATA, { address });
    });
  }
  /**
   * Get up-to-date masterchain state.
   *
   * @public
   */
  getMasterchainInfo() {
    return __awaiter(this, void 0, void 0, function* () {
      const provider = yield this.config.getProvider();
      return provider.sendJsonRpcRequest(Method.TON_GET_MASTERCHAININFO);
    });
  }
  /**
   * Get up-to-date masterchain state.
   *
   * @param senqo The senqo of the master chain block signatures.
   * @public
   */
  getMasterchainBlockSignatures(seqno) {
    return __awaiter(this, void 0, void 0, function* () {
      const provider = yield this.config.getProvider();
      return provider.sendJsonRpcRequest(Method.TON_GET_MASTERCHAINBLOCKSIGNATURES, { seqno });
    });
  }
  /**
   * Get merkle proof of shardchain block.
   *
   * @param params The variable of the shardchain block.
   * @public
   */
  getShardBlockProof(params) {
    return __awaiter(this, void 0, void 0, function* () {
      const provider = yield this.config.getProvider();
      return provider.sendJsonRpcRequest(Method.TON_GET_SHARDBLOCKPROOF, params);
    });
  }
  /**
   * Get consensus block and its update timestamp.
   *
   * @public
   */
  getConsensusBlock() {
    return __awaiter(this, void 0, void 0, function* () {
      const provider = yield this.config.getProvider();
      return provider.sendJsonRpcRequest(Method.TON_GET_CONSENSUSBLOCK);
    });
  }
  /**
   * Look up block by either seqno, lt or unixtime.
   *
   * @param params The variable of the block.
   * @public
   */
  lookupBlock(params) {
    return __awaiter(this, void 0, void 0, function* () {
      const provider = yield this.config.getProvider();
      return provider.sendJsonRpcRequest(Method.TON_LOOKUP_BLOCK, params);
    });
  }
  /**
   * Get shards information.
   *
   * @param senqo The senqo of the shards.
   * @public
   */
  shards(seqno) {
    return __awaiter(this, void 0, void 0, function* () {
      const provider = yield this.config.getProvider();
      return provider.sendJsonRpcRequest(Method.TON_SHARDS, { seqno });
    });
  }
  /**
   * Get metadata of a given block.
   *
   * @param params The variable of the block.
   * @public
   */
  getBlockHeader(params) {
    return __awaiter(this, void 0, void 0, function* () {
      const provider = yield this.config.getProvider();
      return provider.sendJsonRpcRequest(Method.TON_GET_BLOCKHEADER, params);
    });
  }
  /**
   * Get transaction history of a given address.
   *
   * @param params The variable of the transactions.
   * @public
   */
  getTransactions(params) {
    return __awaiter(this, void 0, void 0, function* () {
      const provider = yield this.config.getProvider();
      return provider.sendJsonRpcRequest(Method.TON_GET_TRANSACTIONS, params);
    });
  }
  /**
   * Get transactions of the given block.
   *
   * @param params The variable of the block.
   * @public
   */
  getBlockTransactions(params) {
    return __awaiter(this, void 0, void 0, function* () {
      const provider = yield this.config.getProvider();
      return provider.sendJsonRpcRequest(Method.TON_GET_BLOCK_TRANSACTIONS, params);
    });
  }
  /**
   * Locate outcoming transaction of destination address by incoming message.
   *
   * @param params The variable of the transactions.
   * @public
   */
  tryLocateTx(params) {
    return __awaiter(this, void 0, void 0, function* () {
      const provider = yield this.config.getProvider();
      return provider.sendJsonRpcRequest(Method.TON_TRYLOCATETX, params);
    });
  }
  /**
   * Locate outcoming transaction of destination address by incoming message
   *
   * @param params The variable of the transactions.
   * @public
   */
  tryLocateResultTx(params) {
    return __awaiter(this, void 0, void 0, function* () {
      const provider = yield this.config.getProvider();
      return provider.sendJsonRpcRequest(Method.TON_TRYLOCATERESULTTX, params);
    });
  }
  /**
   * Locate incoming transaction of source address by outcoming message.
   *
   * @param params The variable of the transactions.
   * @public
   */
  tryLocateSourceTx(params) {
    return __awaiter(this, void 0, void 0, function* () {
      const provider = yield this.config.getProvider();
      return provider.sendJsonRpcRequest(Method.TON_TRYLOCATESOURCETX, params);
    });
  }
  /**
   * Get config by id.
   *
   * @param params The variable of the config.
   * @public
   */
  getConfigParam(params) {
    return __awaiter(this, void 0, void 0, function* () {
      const provider = yield this.config.getProvider();
      return provider.sendJsonRpcRequest(Method.TON_GET_CONFIGPARAM, params);
    });
  }
  /**
   * Run get method on smart contract.
   *
   * @param params The variable of the block.
   * @public
   */
  runGetMethod(params) {
    return __awaiter(this, void 0, void 0, function* () {
      const provider = yield this.config.getProvider();
      return provider.sendJsonRpcRequest(Method.TON_RUN_GET_METHOD, params);
    });
  }
  /**
   * Estimate fees required for query processing. body, init-code and init-data accepted in serialized format (b64-encoded).
   *
   * @param params The variable of the block.
   * @public
   */
  estimateFee(params) {
    return __awaiter(this, void 0, void 0, function* () {
      const provider = yield this.config.getProvider();
      return provider.sendJsonRpcRequest(Method.TON_ESTIMATEFEE, params);
    });
  }
};
var TonfuraConfig = class {
  constructor(config) {
    this.apiKey = (config === null || config === void 0 ? void 0 : config.apiKey) || DEFAULT_TONFURA_API_KEY;
    this.network = (config === null || config === void 0 ? void 0 : config.network) || DEFAULT_NETWORK;
    this.maxRetries = (config === null || config === void 0 ? void 0 : config.maxRetries) || DEFAULT_MAX_RETRIES;
    this.url = config === null || config === void 0 ? void 0 : config.url;
  }
  /**
   * Returns an TonfuraProvider instance. Only one provider is created per
   * Tonfura instance.
   *
   * The TonfuraProvider is a wrapper around `axios` class and
   * has been expanded to support Tonfura's APIs.
   *
   * @public
   */
  getProvider() {
    if (!this._baseTonfuraProvider) {
      this._baseTonfuraProvider = (() => __awaiter(this, void 0, void 0, function* () {
        const { TonfuraProvider } = yield import("./TonfuraProvider-6cd1ec81-ZUCRYPS6.js");
        return new TonfuraProvider(this);
      }))();
    }
    return this._baseTonfuraProvider;
  }
};
var Transact = class {
  /** @internal */
  constructor(config) {
    this.config = config;
  }
  /**
   * Send serialized boc file: fully packed and serialized external message to blockchain.
   *
   * @param boc
   * @public
   */
  sendBoc(boc) {
    return __awaiter(this, void 0, void 0, function* () {
      const provider = yield this.config.getProvider();
      return provider.sendJsonRpcRequest(Method.TON_SEND_BOC, { boc });
    });
  }
  /**
   * Send serialized boc file: fully packed and serialized external message to blockchain. The method returns message hash.
   *
   * @param boc
   * @public
   */
  sendBocReturnHash(boc) {
    return __awaiter(this, void 0, void 0, function* () {
      const provider = yield this.config.getProvider();
      return provider.sendJsonRpcRequest(Method.TON_SEND_BOC_RETURN_HASH, { boc });
    });
  }
};
var Tonfura = class {
  /**
   * @param {string} [settings.id] - The id to use for Tonfura
   * @param {string} [settings.apiKey] - The API key to use for Tonfura
   * @param {Network} [settings.network] - The network to use for Tonfura
   * @param {url} [settings.url] - Optional URL endpoint to use for all requests.
   * @param {number} [settings.maxRetries] - The maximum number of retries to attempt
   * @param {number} [settings.requestTimeout] - The timeout after which request should fail
   * @public
   */
  constructor(settings) {
    this.config = new TonfuraConfig(settings);
    this.core = new Core(this.config);
    this.transact = new Transact(this.config);
  }
};

export {
  Network,
  getTonfuraHttpUrl,
  Tonfura
};
/*! Bundled license information:

tonfura-sdk/dist/esm/index-a316dfb9.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)
*/
//# sourceMappingURL=chunk-WVCJMKYD.js.map
