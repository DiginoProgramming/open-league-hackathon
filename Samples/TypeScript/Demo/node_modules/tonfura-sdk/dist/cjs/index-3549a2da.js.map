{"version":3,"file":"index-3549a2da.js","sources":["../../src/constants/settings.ts","../../src/constants/method.ts","../../src/api/Core.ts","../../src/api/TonfuraConfig.ts","../../src/api/Transact.ts","../../src/api/Tonfura.ts"],"sourcesContent":["export enum Network {\n  Mainnet = 'mainnet',\n  Testnet = 'testnet'\n}\n\nexport const DEFAULT_TONFURA_API_KEY = 'DEFAULT_API_KEY';\nexport const DEFAULT_NETWORK = Network.Mainnet;\nexport const DEFAULT_MAX_RETRIES = 5;\n\n/**\n * Returns the base URL for making Tonfura API requests.\n *\n * @internal\n */\nexport function getTonfuraHttpUrl(network: Network, apiKey: string): string {\n  return `https://${network}-rpc.tonfura.com/v1/json-rpc/${apiKey}`;\n}\n","export enum Method {\n  // accounts\n  TON_GET_ADDRESS_INFO = 'ton_getAddressInformation',\n  TON_GET_EXTENDEDADDRESSINFORMATION = 'ton_getExtendedAddressInformation',\n  TON_GET_WALLET_INFORMATION = 'ton_getWalletInformation',\n  TON_GET_ADDRESS_BALANCE = 'ton_getAddressBalance',\n  TON_GET_ADDRESSSTATE = 'ton_getAddressState',\n  TON_PACK_ADDRESS = 'ton_packAddress',\n  TON_UNPACK_ADDRESS = 'ton_unpackAddress',\n  TON_DETECT_ADDRESS = 'ton_detectAddress',\n  TON_GET_TOKEN_DATA = 'ton_getTokenData',\n  // blocks\n  TON_GET_MASTERCHAININFO = 'ton_getMasterchainInfo',\n  TON_GET_MASTERCHAINBLOCKSIGNATURES = 'ton_getMasterchainBlockSignatures',\n  TON_GET_SHARDBLOCKPROOF = 'ton_getShardBlockProof',\n  TON_GET_CONSENSUSBLOCK = 'ton_getConsensusBlock',\n  TON_LOOKUP_BLOCK = 'ton_lookupBlock',\n  TON_SHARDS = 'ton_shards',\n  TON_GET_BLOCKHEADER = 'ton_getBlockHeader',\n  // transactions\n  TON_GET_TRANSACTIONS = 'ton_getTransactions',\n  TON_GET_BLOCK_TRANSACTIONS = 'ton_getBlockTransactions',\n  TON_TRYLOCATETX = 'ton_tryLocateTx',\n  TON_TRYLOCATERESULTTX = 'ton_tryLocateResultTx',\n  TON_TRYLOCATESOURCETX = 'ton_tryLocateSourceTx',\n  // get config\n  TON_GET_CONFIGPARAM = 'ton_getConfigParam',\n  // run method\n  TON_RUN_GET_METHOD = 'ton_runGetMethod',\n  // send\n  TON_SEND_BOC = 'ton_sendBoc',\n  TON_SEND_BOC_RETURN_HASH = 'ton_sendBocReturnHash',\n  TON_ESTIMATEFEE = 'ton_estimateFee'\n}\n","import { Method } from '../constants';\nimport * as TonTypes from '../types/ton-types';\nimport { TonfuraConfig } from './TonfuraConfig';\n\n/**\n * The Core contains all commonly-used ton's methods.\n *\n * Do not call this constructor directly. Instead, instantiate an Tonfura object\n * with `const tonfura = new Tonfura(config)` and then access the Core via `tonfura.core`.\n */\nexport class Core {\n  /** @internal */\n  constructor(private readonly config: TonfuraConfig) {}\n\n  /**\n   * Returns the information of a given address.\n   * Information includes the balance, code, data and last_transaction_id\n   *\n   * @param address The address of the account.\n   * @public\n   */\n  async getAddressInformation(\n    address: TonTypes.GetAddressInformationParams['address']\n  ) {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.GetAddressInformationParams,\n      TonTypes.GetAddressInformationResult\n    >(Method.TON_GET_ADDRESS_INFO, { address });\n  }\n\n  /**\n   * Returns more information of a given address.\n   * Information not only includes the balance, code, data and last_transaction_id,\n   * But also includes the parsed additional information for known contract types\n   * This method is based on tonlib's function getAccountState.\n   * For detecting wallets we recommend to use getWalletInformation.\n   *\n   * @param address The address of the account.\n   * @public\n   */\n  async getExtendedAddressInformation(\n    address: TonTypes.GetExtendedaddressinformationParams['address']\n  ) {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.GetExtendedaddressinformationParams,\n      TonTypes.GetExtendedaddressinformationResult\n    >(Method.TON_GET_EXTENDEDADDRESSINFORMATION, { address });\n  }\n\n  /**\n   * Retrieve wallet information.\n   * This method parses contract state and\n   * currently supports more wallet types than getExtendedAddressInformation: simple wallet, standart wallet, v3 wallet, v4 wallet.\n   *\n   * @param address The address of the account.\n   * @public\n   */\n  async getWalletInformation(\n    address: TonTypes.GetWalletinformationParams['address']\n  ) {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.GetWalletinformationParams,\n      TonTypes.GetWalletinformationResult\n    >(Method.TON_GET_WALLET_INFORMATION, { address });\n  }\n\n  /**\n   * Get balance (in nanotons) of a given address.\n   *\n   * @param address The address of the account.\n   * @public\n   */\n  async getAddressBalance(\n    address: TonTypes.GetAddressbalanceParams['address']\n  ) {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.GetAddressbalanceParams,\n      TonTypes.GetAddressbalanceResult\n    >(Method.TON_GET_ADDRESS_BALANCE, { address });\n  }\n\n  /**\n   * Get state of a given address. State can be either unitialized, active or frozen.\n   *\n   * @param address The address of the account.\n   * @public\n   */\n  async getAddressState(address: TonTypes.GetAddressstateParams['address']) {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.GetAddressstateParams,\n      TonTypes.GetAddressstateResult\n    >(Method.TON_GET_ADDRESSSTATE, { address });\n  }\n\n  /**\n   * Convert an address from raw to human-readable format.\n   *\n   * @param address The address of the account.\n   * @public\n   */\n  async packAddress(address: TonTypes.PackAddressParams['address']) {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.PackAddressParams,\n      TonTypes.PackAddressResult\n    >(Method.TON_PACK_ADDRESS, { address });\n  }\n\n  /**\n   * Convert an address from human-readable to raw format.\n   *\n   * @param address The address of the account.\n   * @public\n   */\n  async unpackAddress(address: TonTypes.UnpackAddressParams['address']) {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.UnpackAddressParams,\n      TonTypes.UnpackAddressResult\n    >(Method.TON_UNPACK_ADDRESS, { address });\n  }\n\n  /**\n   * Get all possible address forms.\n   *\n   * @param address The address of the account.\n   * @public\n   */\n  async detectAddress(address: TonTypes.DetectAddressParams['address']) {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.DetectAddressParams,\n      TonTypes.DetectAddressResult\n    >(Method.TON_DETECT_ADDRESS, { address });\n  }\n\n  /**\n   * Get NFT or Jetton information.\n   *\n   * @param address The address of the account.\n   * @public\n   */\n  async getTokenData(address: TonTypes.GetTokenDataParams['address']) {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.GetTokenDataParams,\n      TonTypes.GetTokenDataResult\n    >(Method.TON_GET_TOKEN_DATA, { address });\n  }\n\n  /**\n   * Get up-to-date masterchain state.\n   *\n   * @public\n   */\n  async getMasterchainInfo() {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.GetMasterchainInfoParams,\n      TonTypes.GetMasterchainInfoResult\n    >(Method.TON_GET_MASTERCHAININFO);\n  }\n\n  /**\n   * Get up-to-date masterchain state.\n   *\n   * @param senqo The senqo of the master chain block signatures.\n   * @public\n   */\n  async getMasterchainBlockSignatures(\n    seqno: TonTypes.GetMasterchainBlockSignaturesParams['seqno']\n  ) {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.GetMasterchainBlockSignaturesParams,\n      TonTypes.GetMasterchainBlockSignaturesResult\n    >(Method.TON_GET_MASTERCHAINBLOCKSIGNATURES, { seqno });\n  }\n\n  /**\n   * Get merkle proof of shardchain block.\n   *\n   * @param params The variable of the shardchain block.\n   * @public\n   */\n  async getShardBlockProof(params: TonTypes.GetShardBlockProofParams) {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.GetShardBlockProofParams,\n      TonTypes.GetShardBlockProofResult\n    >(Method.TON_GET_SHARDBLOCKPROOF, params);\n  }\n\n  /**\n   * Get consensus block and its update timestamp.\n   *\n   * @public\n   */\n  async getConsensusBlock() {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.GetConsensusBlockParams,\n      TonTypes.GetConsensusBlockResult\n    >(Method.TON_GET_CONSENSUSBLOCK);\n  }\n\n  /**\n   * Look up block by either seqno, lt or unixtime.\n   *\n   * @param params The variable of the block.\n   * @public\n   */\n  async lookupBlock(params: TonTypes.LookupBlockParams) {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.LookupBlockParams,\n      TonTypes.LookupBlockResult\n    >(Method.TON_LOOKUP_BLOCK, params);\n  }\n\n  /**\n   * Get shards information.\n   *\n   * @param senqo The senqo of the shards.\n   * @public\n   */\n  async shards(seqno: TonTypes.ShardsParams['seqno']) {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.ShardsParams,\n      TonTypes.ShardsResult\n    >(Method.TON_SHARDS, { seqno });\n  }\n\n  /**\n   * Get metadata of a given block.\n   *\n   * @param params The variable of the block.\n   * @public\n   */\n  async getBlockHeader(params: TonTypes.GetBlockHeaderParams) {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.GetBlockHeaderParams,\n      TonTypes.GetBlockHeaderResult\n    >(Method.TON_GET_BLOCKHEADER, params);\n  }\n\n  /**\n   * Get transaction history of a given address.\n   *\n   * @param params The variable of the transactions.\n   * @public\n   */\n  async getTransactions(params: TonTypes.GetTransactionsParams) {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.GetTransactionsParams,\n      TonTypes.GetTransactionsResult\n    >(Method.TON_GET_TRANSACTIONS, params);\n  }\n\n  /**\n   * Get transactions of the given block.\n   *\n   * @param params The variable of the block.\n   * @public\n   */\n  async getBlockTransactions(params: TonTypes.GetBlockTransactionsParams) {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.GetBlockTransactionsParams,\n      TonTypes.GetBlockTransactionsResult\n    >(Method.TON_GET_BLOCK_TRANSACTIONS, params);\n  }\n\n  /**\n   * Locate outcoming transaction of destination address by incoming message.\n   *\n   * @param params The variable of the transactions.\n   * @public\n   */\n  async tryLocateTx(params: TonTypes.TryLocateTxParams) {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.TryLocateTxParams,\n      TonTypes.TryLocateTxResult\n    >(Method.TON_TRYLOCATETX, params);\n  }\n\n  /**\n   * Locate outcoming transaction of destination address by incoming message\n   *\n   * @param params The variable of the transactions.\n   * @public\n   */\n  async tryLocateResultTx(params: TonTypes.TryLocateResultTxParams) {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.TryLocateResultTxParams,\n      TonTypes.TryLocateResultTxResult\n    >(Method.TON_TRYLOCATERESULTTX, params);\n  }\n\n  /**\n   * Locate incoming transaction of source address by outcoming message.\n   *\n   * @param params The variable of the transactions.\n   * @public\n   */\n  async tryLocateSourceTx(params: TonTypes.TryLocateSourceTxParams) {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.TryLocateSourceTxParams,\n      TonTypes.TryLocateSourceTxResult\n    >(Method.TON_TRYLOCATESOURCETX, params);\n  }\n\n  /**\n   * Get config by id.\n   *\n   * @param params The variable of the config.\n   * @public\n   */\n  async getConfigParam(params: TonTypes.GetConfigParamParams) {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.GetConfigParamParams,\n      TonTypes.GetConfigParamResult\n    >(Method.TON_GET_CONFIGPARAM, params);\n  }\n\n  /**\n   * Run get method on smart contract.\n   *\n   * @param params The variable of the block.\n   * @public\n   */\n  async runGetMethod(params: TonTypes.RunGetMethodParams) {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.RunGetMethodParams,\n      TonTypes.RunGetMethodResult\n    >(Method.TON_RUN_GET_METHOD, params);\n  }\n\n  /**\n   * Estimate fees required for query processing. body, init-code and init-data accepted in serialized format (b64-encoded).\n   *\n   * @param params The variable of the block.\n   * @public\n   */\n  async estimateFee(params: TonTypes.EstimatefeeParams) {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.EstimatefeeParams,\n      TonTypes.EstimatefeeResult\n    >(Method.TON_ESTIMATEFEE, params);\n  }\n}\n","import {\n  DEFAULT_MAX_RETRIES,\n  DEFAULT_NETWORK,\n  DEFAULT_TONFURA_API_KEY,\n  Network\n} from '../constants';\nimport { TonfuraSettings } from '../types/types';\nimport type { TonfuraProvider } from './TonfuraProvider';\n\n/**\n * This class holds the config information for the SDK client instance and\n * exposes the underlying providers for more advanced use cases.\n *\n * @public\n */\nexport class TonfuraConfig {\n  /** The Tonfura API key. */\n  readonly apiKey: string;\n\n  /** The Network that this SDK is associated with. */\n  readonly network: Network;\n\n  /** The maximum number of retries to perform. */\n  readonly maxRetries: number;\n\n  /**\n   * The optional hardcoded URL to send requests to instead of using the network\n   * and apiKey.\n   */\n  readonly url?: string;\n\n  /**\n   * Dynamically imported provider instance.\n   *\n   * @internal\n   */\n  private _baseTonfuraProvider: Promise<TonfuraProvider> | undefined;\n\n  constructor(config?: TonfuraSettings) {\n    this.apiKey = config?.apiKey || DEFAULT_TONFURA_API_KEY;\n    this.network = config?.network || DEFAULT_NETWORK;\n    this.maxRetries = config?.maxRetries || DEFAULT_MAX_RETRIES;\n    this.url = config?.url;\n  }\n\n  /**\n   * Returns an TonfuraProvider instance. Only one provider is created per\n   * Tonfura instance.\n   *\n   * The TonfuraProvider is a wrapper around `axios` class and\n   * has been expanded to support Tonfura's APIs.\n   *\n   * @public\n   */\n  getProvider(): Promise<TonfuraProvider> {\n    if (!this._baseTonfuraProvider) {\n      this._baseTonfuraProvider = (async () => {\n        const { TonfuraProvider } = await import('./TonfuraProvider');\n        return new TonfuraProvider(this);\n      })();\n    }\n    return this._baseTonfuraProvider;\n  }\n}\n","import { Method } from '../constants';\nimport * as TonTypes from '../types/ton-types';\nimport { TonfuraConfig } from './TonfuraConfig';\n\n/**\n * The Transact contains methods used for sending transactions and\n * checking on the state of submitted transactions.\n *\n * Do not call this constructor directly. Instead, instantiate an Tonfura object\n * with `const tonfura = new Tonfura(config)` and then access the transact via `tonfura.transact`.\n */\nexport class Transact {\n  /** @internal */\n  constructor(private readonly config: TonfuraConfig) {}\n\n  /**\n   * Send serialized boc file: fully packed and serialized external message to blockchain.\n   *\n   * @param boc\n   * @public\n   */\n  async sendBoc(boc: TonTypes.SendBocParams['boc']) {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.SendBocParams,\n      TonTypes.SendBocResult\n    >(Method.TON_SEND_BOC, { boc });\n  }\n\n  /**\n   * Send serialized boc file: fully packed and serialized external message to blockchain. The method returns message hash.\n   *\n   * @param boc\n   * @public\n   */\n  async sendBocReturnHash(boc: TonTypes.SendBocReturnHashParams['boc']) {\n    const provider = await this.config.getProvider();\n    return provider.sendJsonRpcRequest<\n      TonTypes.SendBocReturnHashParams,\n      TonTypes.SendBocReturnHashResult\n    >(Method.TON_SEND_BOC_RETURN_HASH, { boc });\n  }\n\n  // TODO: Implement sendQuery\n}\n","import { TonfuraSettings } from '../types/types';\nimport { Core } from './Core';\nimport { TonfuraConfig } from './TonfuraConfig';\nimport { Transact } from './Transact';\n\n/**\n * The Tonfura SDK client. This class is the main entry point into Tonfura's\n * APIs and separates functionality into different namespaces.\n *\n * Each SDK instance is associated with a specific network and API key. To use a\n * different network or API key, create a new instance of {@link Tonfura}.\n *\n * @public\n */\nexport class Tonfura {\n  /**\n   * The `core` contains the core ton json-rpc calls.\n   */\n  readonly core: Core;\n\n  /**\n   * The `transact` contains methods for sending transactions and\n   * checking on the state of submitted transasctions.\n   */\n  readonly transact: Transact;\n\n  /**\n   * Holds the setting information for the instance of the Tonfura SDK client\n   * and allows access to the underlying providers.\n   */\n  readonly config: TonfuraConfig;\n\n  /**\n   * @param {string} [settings.id] - The id to use for Tonfura\n   * @param {string} [settings.apiKey] - The API key to use for Tonfura\n   * @param {Network} [settings.network] - The network to use for Tonfura\n   * @param {url} [settings.url] - Optional URL endpoint to use for all requests.\n   * @param {number} [settings.maxRetries] - The maximum number of retries to attempt\n   * @param {number} [settings.requestTimeout] - The timeout after which request should fail\n   * @public\n   */\n  constructor(settings?: TonfuraSettings) {\n    this.config = new TonfuraConfig(settings);\n\n    this.core = new Core(this.config);\n    this.transact = new Transact(this.config);\n  }\n}\n"],"names":["Network"],"mappings":"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"}