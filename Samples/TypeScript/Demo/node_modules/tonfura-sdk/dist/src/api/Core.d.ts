import * as TonTypes from '../types/ton-types';
/**
 * The Core contains all commonly-used ton's methods.
 *
 * Do not call this constructor directly. Instead, instantiate an Tonfura object
 * with `const tonfura = new Tonfura(config)` and then access the Core via `tonfura.core`.
 */
export declare class Core {
    private readonly config;
    /**
     * Returns the information of a given address.
     * Information includes the balance, code, data and last_transaction_id
     *
     * @param address The address of the account.
     * @public
     */
    getAddressInformation(address: TonTypes.GetAddressInformationParams['address']): Promise<import("axios").AxiosResponse<import("../types/json-rpc-types").JsonRpcResponse<import("../types/output").ReturnGetAddressInfromation>, any>>;
    /**
     * Returns more information of a given address.
     * Information not only includes the balance, code, data and last_transaction_id,
     * But also includes the parsed additional information for known contract types
     * This method is based on tonlib's function getAccountState.
     * For detecting wallets we recommend to use getWalletInformation.
     *
     * @param address The address of the account.
     * @public
     */
    getExtendedAddressInformation(address: TonTypes.GetExtendedaddressinformationParams['address']): Promise<import("axios").AxiosResponse<import("../types/json-rpc-types").JsonRpcResponse<import("../types/output").ReturnGetExtendedaddressinformation>, any>>;
    /**
     * Retrieve wallet information.
     * This method parses contract state and
     * currently supports more wallet types than getExtendedAddressInformation: simple wallet, standart wallet, v3 wallet, v4 wallet.
     *
     * @param address The address of the account.
     * @public
     */
    getWalletInformation(address: TonTypes.GetWalletinformationParams['address']): Promise<import("axios").AxiosResponse<import("../types/json-rpc-types").JsonRpcResponse<import("../types/output").ReturnGetWalletinformation>, any>>;
    /**
     * Get balance (in nanotons) of a given address.
     *
     * @param address The address of the account.
     * @public
     */
    getAddressBalance(address: TonTypes.GetAddressbalanceParams['address']): Promise<import("axios").AxiosResponse<import("../types/json-rpc-types").JsonRpcResponse<import("../types/output").ReturnGetAddressbalance>, any>>;
    /**
     * Get state of a given address. State can be either unitialized, active or frozen.
     *
     * @param address The address of the account.
     * @public
     */
    getAddressState(address: TonTypes.GetAddressstateParams['address']): Promise<import("axios").AxiosResponse<import("../types/json-rpc-types").JsonRpcResponse<import("../types/output").ReturnGetAddressstate>, any>>;
    /**
     * Convert an address from raw to human-readable format.
     *
     * @param address The address of the account.
     * @public
     */
    packAddress(address: TonTypes.PackAddressParams['address']): Promise<import("axios").AxiosResponse<import("../types/json-rpc-types").JsonRpcResponse<import("../types/output").ReturnPackAddress>, any>>;
    /**
     * Convert an address from human-readable to raw format.
     *
     * @param address The address of the account.
     * @public
     */
    unpackAddress(address: TonTypes.UnpackAddressParams['address']): Promise<import("axios").AxiosResponse<import("../types/json-rpc-types").JsonRpcResponse<import("../types/output").ReturnUnpackAddress>, any>>;
    /**
     * Get all possible address forms.
     *
     * @param address The address of the account.
     * @public
     */
    detectAddress(address: TonTypes.DetectAddressParams['address']): Promise<import("axios").AxiosResponse<import("../types/json-rpc-types").JsonRpcResponse<import("../types/output").ReturnDetectAddress>, any>>;
    /**
     * Get NFT or Jetton information.
     *
     * @param address The address of the account.
     * @public
     */
    getTokenData(address: TonTypes.GetTokenDataParams['address']): Promise<import("axios").AxiosResponse<import("../types/json-rpc-types").JsonRpcResponse<import("../types/output").ReturnGetTokenData>, any>>;
    /**
     * Get up-to-date masterchain state.
     *
     * @public
     */
    getMasterchainInfo(): Promise<import("axios").AxiosResponse<import("../types/json-rpc-types").JsonRpcResponse<import("../types/output").ReturnGetMasterchaininfo>, any>>;
    /**
     * Get up-to-date masterchain state.
     *
     * @param senqo The senqo of the master chain block signatures.
     * @public
     */
    getMasterchainBlockSignatures(seqno: TonTypes.GetMasterchainBlockSignaturesParams['seqno']): Promise<import("axios").AxiosResponse<import("../types/json-rpc-types").JsonRpcResponse<import("../types/output").ReturnGetMasterchainblocksignatures>, any>>;
    /**
     * Get merkle proof of shardchain block.
     *
     * @param params The variable of the shardchain block.
     * @public
     */
    getShardBlockProof(params: TonTypes.GetShardBlockProofParams): Promise<import("axios").AxiosResponse<import("../types/json-rpc-types").JsonRpcResponse<import("../types/output").ReturnGetShardblockproof>, any>>;
    /**
     * Get consensus block and its update timestamp.
     *
     * @public
     */
    getConsensusBlock(): Promise<import("axios").AxiosResponse<import("../types/json-rpc-types").JsonRpcResponse<import("../types/output").ReturnConsensusblock>, any>>;
    /**
     * Look up block by either seqno, lt or unixtime.
     *
     * @param params The variable of the block.
     * @public
     */
    lookupBlock(params: TonTypes.LookupBlockParams): Promise<import("axios").AxiosResponse<import("../types/json-rpc-types").JsonRpcResponse<import("../types/output").ReturnLookupBlock>, any>>;
    /**
     * Get shards information.
     *
     * @param senqo The senqo of the shards.
     * @public
     */
    shards(seqno: TonTypes.ShardsParams['seqno']): Promise<import("axios").AxiosResponse<import("../types/json-rpc-types").JsonRpcResponse<import("../types/output").ReturnShard>, any>>;
    /**
     * Get metadata of a given block.
     *
     * @param params The variable of the block.
     * @public
     */
    getBlockHeader(params: TonTypes.GetBlockHeaderParams): Promise<import("axios").AxiosResponse<import("../types/json-rpc-types").JsonRpcResponse<import("../types/output").ReturnGetBlockheader>, any>>;
    /**
     * Get transaction history of a given address.
     *
     * @param params The variable of the transactions.
     * @public
     */
    getTransactions(params: TonTypes.GetTransactionsParams): Promise<import("axios").AxiosResponse<import("../types/json-rpc-types").JsonRpcResponse<TonTypes.GetTransactionsResult>, any>>;
    /**
     * Get transactions of the given block.
     *
     * @param params The variable of the block.
     * @public
     */
    getBlockTransactions(params: TonTypes.GetBlockTransactionsParams): Promise<import("axios").AxiosResponse<import("../types/json-rpc-types").JsonRpcResponse<import("../types/output").ReturnGetBlockTransactions>, any>>;
    /**
     * Locate outcoming transaction of destination address by incoming message.
     *
     * @param params The variable of the transactions.
     * @public
     */
    tryLocateTx(params: TonTypes.TryLocateTxParams): Promise<import("axios").AxiosResponse<import("../types/json-rpc-types").JsonRpcResponse<import("../types/output").ReturnTrylocatetx>, any>>;
    /**
     * Locate outcoming transaction of destination address by incoming message
     *
     * @param params The variable of the transactions.
     * @public
     */
    tryLocateResultTx(params: TonTypes.TryLocateResultTxParams): Promise<import("axios").AxiosResponse<import("../types/json-rpc-types").JsonRpcResponse<import("../types/output").ReturnTrylocateresulttx>, any>>;
    /**
     * Locate incoming transaction of source address by outcoming message.
     *
     * @param params The variable of the transactions.
     * @public
     */
    tryLocateSourceTx(params: TonTypes.TryLocateSourceTxParams): Promise<import("axios").AxiosResponse<import("../types/json-rpc-types").JsonRpcResponse<import("../types/output").ReturnTrylocatesourcetx>, any>>;
    /**
     * Get config by id.
     *
     * @param params The variable of the config.
     * @public
     */
    getConfigParam(params: TonTypes.GetConfigParamParams): Promise<import("axios").AxiosResponse<import("../types/json-rpc-types").JsonRpcResponse<import("../types/output").ReturnGetConfigparam>, any>>;
    /**
     * Run get method on smart contract.
     *
     * @param params The variable of the block.
     * @public
     */
    runGetMethod(params: TonTypes.RunGetMethodParams): Promise<import("axios").AxiosResponse<import("../types/json-rpc-types").JsonRpcResponse<import("../types/output").ReturnCall>, any>>;
    /**
     * Estimate fees required for query processing. body, init-code and init-data accepted in serialized format (b64-encoded).
     *
     * @param params The variable of the block.
     * @public
     */
    estimateFee(params: TonTypes.EstimatefeeParams): Promise<import("axios").AxiosResponse<import("../types/json-rpc-types").JsonRpcResponse<import("../types/output").ReturnEstimatefee>, any>>;
}
